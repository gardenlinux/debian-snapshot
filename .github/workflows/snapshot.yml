name: snapshot
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
jobs:
  init:
    outputs:
      version: ${{ steps.version.outputs.version }}
      mirror_matrix: ${{ steps.setup_matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    env:
      FILES_PER_MIRROR_JOB: 64
      MAX_MIRROR_JOBS: 256
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_OIDC_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      - run: aws sts get-caller-identity
      - name: start fetching S3 bucket ${{ vars.S3_BUCKET }} contents
        id: list_s3
        run: |
          fifo="$(mktemp -u)"
          mkfifo "$fifo"
          echo "fifo=$fifo" >> "$GITHUB_OUTPUT"
          aws s3api list-objects --bucket '${{ vars.S3_BUCKET }}' | jq -r '.Contents // [] | .[].Key' | grep -v ' ' | sort > "$fifo" &
          disown
      - name: resolve GL version
        id: version
        run: |
          gl_start=2020-03-31
          currentdate="$(date -u '+%Y-%m-%d')"
          datediff=$(( "$(date -u -d "$currentdate" '+%s')" - "$(date -u -d "$gl_start" '+%s')" ))
          days_since_start=$(( datediff / 86400 ))
          echo "version=$days_since_start" > "$GITHUB_OUTPUT"
      - name: mirror debian testing meta data
        run: |
          podman build -t mirror_apt_repo .
          mkdir repo
          podman run --rm -e 'AWS_*' \
            -e 'KMS_KEY_ID=${{ secrets.KMS_KEY_ID }}' \
            -e 'KMS_KEY_CERT=${{ secrets.KMS_KEY_CERT }}' \
            -e 'KMS_KEY_GPG=${{ secrets.KMS_KEY_GPG }}' \
            -v "$PWD/repo:/mnt/repo" \
            mirror_apt_repo -o '${{ steps.version.outputs.version }}' -t /mnt/repo
          tar -c repo | gzip > repo.tar.gz
      - uses: actions/upload-artifact@v4
        with:
          name: repo
          path: repo.tar.gz
      - name: setup mirror matrix
        id: setup_matrix
        run: |
          set -eufo pipefail
          join -v 1 <(sort -u < repo/mirrorlist) '${{ steps.list_s3.outputs.fifo }}' > mirrorlist
          num_files="$(wc -l mirrorlist | awk '{print $1}')"
          num_jobs="$(( ( num_files + FILES_PER_MIRROR_JOB - 1) / FILES_PER_MIRROR_JOB ))"
          if [ "$num_jobs" = 0 ]; then
            echo "matrix=" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [ "$num_jobs" -gt "$MAX_MIRROR_JOBS" ]; then num_jobs="$MAX_MIRROR_JOBS"; fi
          echo "matrix=$(jq -n -c '{"id":[ range('"$num_jobs"') ]}')" >> "$GITHUB_OUTPUT"
      - run: gzip < mirrorlist > mirrorlist.gz
      - uses: actions/upload-artifact@v4
        with:
          name: mirrorlist
          path: mirrorlist.gz
  mirror:
    needs: init
    if: ${{ needs.init.outputs.mirror_matrix != '' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    strategy:
      matrix: ${{ fromJson(needs.init.outputs.mirror_matrix) }}
      fail-fast: false
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_OIDC_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      - run: aws sts get-caller-identity
      - uses: actions/download-artifact@v4
        with:
          name: mirrorlist
      - name: mirror
        run: |
          set -eufo pipefail
          job_id='${{ matrix.id }}'
          num_jobs="$(echo '${{ needs.init.outputs.mirror_matrix }}' | jq -r '.id | length')"
          gzip -d < mirrorlist.gz | awk "NR % $num_jobs == $job_id { print }" > mirrorlist
          num_files="$(wc -l mirrorlist | awk '{ print $1 }')"
          cntr=0
          cat mirrorlist | while read -r target source sha256sum; do
            tmp="$(mktemp)"
            if [ "$(curl -sSf "$source" | tee "$tmp" | sha256sum | head -c 64)" != "$sha256sum" ]; then
              echo "invalid sha256sum: $source" >&2
              exit 1
            fi
            echo "$tmp $target"
          done | while read -r tmp target; do
            [ -n "$target" ]
            target_transformed="$(tr '+' ' ' <<< "$target")"
            [ "$target" = "$target_transformed" ] || aws s3 cp --quiet "$tmp" "s3://${{ vars.S3_BUCKET }}/$target_transformed"
            aws s3 cp --quiet "$tmp" "s3://${{ vars.S3_BUCKET }}/$target"
            rm "$tmp"
            cntr="$(( cntr + 1 ))"
            echo "[$cntr/$num_files] $target"
          done
  publish:
    needs: [ init, mirror ]
    if: ${{ always() && needs.init.result == 'success' && (needs.mirror.result == 'success' || needs.mirror.result == 'skipped') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_OIDC_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
      - run: aws sts get-caller-identity
      - uses: actions/download-artifact@v4
        with:
          name: repo
      - name: publish ${{ needs.init.outputs.version }} to S3
        run: |
          set -eufo pipefail
          gzip -d < repo.tar.gz | tar -x
          version='${{ needs.init.outputs.version }}'
          if aws s3api head-object --bucket '${{ vars.S3_BUCKET }}' --key "dists/$version/InRelease"; then
            echo "release $version already exists" >&2
            exit 1
          fi
          aws s3 cp --recursive repo "s3://${{ vars.S3_BUCKET }}/dists/$version"
  containerize:
    name: bootstrap dev container
    needs: [ init, publish ]
    if: ${{ always() && needs.publish.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setup binfmt_misc
        run: sudo podman run --privileged ghcr.io/gardenlinux/binfmt_container >/dev/null 2>&1
      - name: build
        run: |
          version='${{ needs.init.outputs.version }}'
          echo "$version" > bootstrap_container/version
          echo 'https://${{ vars.S3_BUCKET }}.s3.eu-central-1.amazonaws.com' > bootstrap_container/repo
          cd bootstrap_container
          ./build container-amd64 container-arm64
      - name: publish
        run: |
          version='${{ needs.init.outputs.version }}'
          podman login -u token -p ${{ github.token }} ghcr.io
          image_amd64="$(podman load < bootstrap_container/.build/container-amd64-*.oci | awk '{ print $NF }')"
          podman tag "$image_amd64" "ghcr.io/${{ github.repository }}/amd64:$version"
          podman push "ghcr.io/${{ github.repository }}/amd64:$version"
          image_arm64="$(podman load < bootstrap_container/.build/container-arm64-*.oci | awk '{ print $NF }')"
          podman tag "$image_arm64" "ghcr.io/${{ github.repository }}/arm64:$version"
          podman push "ghcr.io/${{ github.repository }}/arm64:$version"
      - name: test
        run: |
          version='${{ needs.init.outputs.version }}'
          podman run --rm "ghcr.io/${{ github.repository }}/amd64:$version" bash -c 'apt-get update && apt-get install -y vim'
          podman run --rm "ghcr.io/${{ github.repository }}/arm64:$version" bash -c 'apt-get update && apt-get install -y vim'
